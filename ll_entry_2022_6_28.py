import pyodbc
import cx_Oracle
import db
import excel
import os, re

#ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
def check_f25_filename(f25_str):
    """
    Need to write test case for this one
    """
    pattern = r'^RP-\d+\+-?\d+\.?\d? to RP-\d+\+-?\d+\.?\d?'
    assert re.match(pattern,f25_str), 'F25 filename does not meet requirement'

def compose_ll_entry_string(ll_no, f25_path, year, start_gps, end_gps, pavtype):
    base_f25_path = os.path.basename(f25_path)
    # new logic to check direction and lane info
    # Check if the f25 name matches the pattern
    check_f25_filename(" ".join(base_f25_path.split(" ")[2:]))
    dir = base_f25_path.split(" ")[1]
    assert dir in ['NB','SB','WB','EB'], 'Check if direction is included in F25 name after the first space!'
    lane_info = " ".join(base_f25_path.split(" ")[5:])
    lane_info = lane_info[:-4] # Use [:-4] get rid of the extention name like '.F25'

    # Categorize lane_info into 10 classes
    if lane_info == '' or 'DL' in lane_info or 'OLD' in lane_info:
        lane_type = 'DL'
    elif 'LN1' in lane_info:
        lane_type = 'LN1'
    elif 'LN2' in lane_info:
        lane_type = 'LN2'
    elif 'LN3' in lane_info:
        lane_type = 'LN3'
    elif 'LN4' in lane_info:
        lane_type = 'LN4'
    elif 'LN5' in lane_info:
        lane_type = 'LN5'
    elif 'PL' in lane_info:
        lane_type = 'PL'
    elif 'sh' in lane_info.lower():
        lane_type = 'SHOULDER'
    elif 'ramp' in lane_info.lower():
        lane_type = 'RAMP'
    else:
        lane_type = 'UNKNOWN'

    if start_gps[0] is not None:
        sqlstr = """INSERT INTO stda_LONGLIST
        VALUES (NULL,""" + ll_no + """, 
        '""" + str(year) + """', 
        '""" + dir + """',
        '""" + lane_type + """',
        '""" + pavtype + """',
        '""" + base_f25_path[:-4] + """', 
        '""" + base_f25_path[:-4]+'.docx' + """', 
        '""" + str(start_gps[0]) + """', 
        '""" + str(end_gps[0]) + """', 
        '""" + str(start_gps[1]) + """', 
        '""" + str(end_gps[1]) + """', 
        -1, NULL, -1, NULL)"""
        # print(sqlstr)

        idstr = """
        SELECT LONGLIST_ID FROM stda_LONGLIST
        WHERE LONGLIST_NO=""" + ll_no + """ AND 
        YEAR='""" + str(year) + """' AND 
        DIRECTION='""" + dir + """' AND
        PAVTYPE='""" + pavtype + """' AND 
        F25_INFO='""" + base_f25_path[:-4] + """' AND 
        REPORT_DOC='""" + base_f25_path[:-4]+'.docx' + """' AND  
        BEGIN_LATITUDE='""" + str(start_gps[0]) + """' AND 
        END_LATITUDE='""" + str(end_gps[0]) + """' AND  
        BEGIN_LONGITUDE='""" + str(start_gps[1]) + """' AND 
        END_LONGITUDE='""" + str(end_gps[1]) + """'
        """
    # In case we don't have GPS data
    else:
        sqlstr = """INSERT INTO stda_LONGLIST
        VALUES (NULL,""" + ll_no + """, 
        '""" + str(year) + """', 
        '""" + dir + """', 
        '""" + lane_type + """', 
        '""" + pavtype + """', 
        '""" + base_f25_path[:-4] + """', 
        '""" + base_f25_path[:-4]+'.docx' + """', 
        NULL, 
        NULL, 
        NULL, 
        NULL, 
        -1, NULL, -1, NULL)"""
        # print(sqlstr)

        idstr = """
        SELECT LONGLIST_ID FROM stda_LONGLIST
        WHERE LONGLIST_NO=""" + ll_no + """ AND 
        YEAR='""" + str(year) + """' AND 
        DIRECTION='""" + dir + """' AND
        PAVTYPE='""" + pavtype + """' AND
        F25_INFO='""" + base_f25_path[:-4] + """' AND 
        REPORT_DOC='""" + base_f25_path[:-4]+'.docx' + """'
        """

    # print(idstr)
    return sqlstr, idstr, dir, lane_type

def ll_entry(con, ll_no, f25_path, year, start_gps, end_gps, pavtype, commit=0):

    cursor = con.cursor()
    sqlstr, idstr, dir, lane_type = compose_ll_entry_string(ll_no, f25_path, year, start_gps, end_gps, pavtype)
    cursor.execute(sqlstr)
    cursor.execute(idstr)
    
    for result in cursor:
        print('Content of result: {}'.format(result))
        id = result[0]
    
    if commit:
        con.commit()
    cursor.close()
    return id, dir, lane_type


