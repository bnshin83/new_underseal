Select stda.stda_longlist_info.request_no as "Request ID", stda.stda_longlist.f25_info as "Test Description", stda.stda_longlist.pavtype as "Pavement Type", stda.stda_longlist.Lane_info as "Lane Type", stda.stda_Deflections.Chainage_ft as "Test DMI (feet)", stda.stda_longlist_info.traffic_ctrl as "Test Date", 
CASE WHEN stda.stda_longlist.direction LIKE '%EB%' THEN 'Inc' WHEN stda.stda_longlist.direction LIKE '%NB%' THEN 'Inc' ELSE 'Dec' END As "Travel Direction", null as "Lane_Position_Research", null as "Lane_Position_DTIMS", stda.stda_deflections.gpsx as "Latitude(decimal degrees)", stda.stda_deflections.gpsy as "Longitude(decimal degrees)", null as "Reciever Type", round(stda.stda_misc.D0_criteria,2) as "Surface Deflection Criteria", round(stda.stda_misc.subgrade_criteria,2) as "Subgrade Deflection Criteria", 
round(stda.stda_calculations.deflection_0,2) as "Surface Deflection", round(stda.stda_calculations.deflection_8,2) as "Subgrade Deflection", round(stda.stda_calculations.insitucbr,2) as "In-Situ CBR", round(stda.stda_calculations.structural_number,2) as "In-Situ Structure Number",  round(stda.stda_calculations.insitumr) as "Resilient Modulus(corrected, psi)", 
round(stda.stda_calculations.indot_esals) as "Remaining ESALs", round(stda.stda_calculations.k_value) as "K Value", null as "LTE", round(stda.stda_calculations.E1_Layer1_ksi*1000) as "E1_Layer1 (psi)", round(stda.stda_calculations.E2_Layer2_ksi*1000) as "E2_Layer2 (psi)", round(stda.stda_calculations.E3_Layer3_ksi*1000) as "E3_Layer3 (psi)", round(stda.stda_calculations.E4_Layer4_ksi*1000) as "E4_Layer4 (psi)",
round(stda.stda_deflections.deflection_1,2) as "D1(uncorrected)", round(stda.stda_deflections.deflection_2,2) as "D2(uncorrected)", round(stda.stda_deflections.deflection_3,2) as "D3(uncorrected)", round(stda.stda_deflections.deflection_4,2) as "D4(uncorrected)", round(stda.stda_deflections.deflection_5,2) as "D5(uncorrected)", round(stda.stda_deflections.deflection_6,2) as "D6(uncorrected)", round(stda.stda_deflections.deflection_7,2) as "D7(uncorrected)", round(stda.stda_deflections.deflection_8,2) as "D8(uncorrected)", round(stda.stda_deflections.deflection_9,2) as "D9(uncorrected)", stda.stda_deflections.surface_temp as "Surface Temperature(F)", stda.stda_deflections.air_temp as "Air Temperature(F)" , round(stda.stda_moduli_estimated.thickness_1,2) as "Thickness_Layer1 (in)", round(stda.stda_moduli_estimated.thickness_2,2) as "Thickness_Layer2 (in)", round(stda.stda_moduli_estimated.thickness_3,2) as "Thickness_Layer3 (in)", round(stda.stda_moduli_estimated.thickness_4,2) as "Thickness_Layer4 (in)"
FROM stda.stda_moduli_estimated INNER JOIN stda.stda_Deflections ON stda.stda_Deflections.longlist_id = stda.stda_moduli_estimated.longlist_id AND stda.stda_Deflections.point = stda.stda_moduli_estimated.point AND stda.stda_Deflections.drop_no = stda.stda_moduli_estimated.drop_no INNER JOIN stda.stda_calculations ON stda.stda_Deflections.longlist_id = stda.stda_calculations.longlist_id AND stda.stda_Deflections.point = stda.stda_calculations.point AND stda.stda_Deflections.drop_no = stda.stda_calculations.drop_no
INNER JOIN stda.stda_misc ON stda.stda_misc.longlist_id = stda.stda_calculations.longlist_id
INNER JOIN stda.stda_longlist ON stda.stda_misc.longlist_id = stda.stda_longlist.longlist_id
INNER JOIN stda.stda_longlist_info ON stda.stda_longlist.longlist_no = stda.stda_longlist_info.longlist_no AND stda.stda_longlist.year = stda.stda_longlist_info.year ORDER BY stda.stda_longlist.longlist_id, stda.stda_calculations.point ASC;
