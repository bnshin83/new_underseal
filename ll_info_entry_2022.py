import pyodbc
import cx_Oracle
import db
import excel
import os
import datetime

# def init_tables(con):
#     sqlstr = """CREATE TABLE LONGLIST(
#     id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 INCREMENT BY 1,
#     LL_NO NUMBER,
#     DIR VARCHAR(5),
#     REQUEST_NO VARCHAR(100),
#     TEST_STATUS VARCHAR(255),
#     ROUTE VARCHAR(20),
#     RP_FROM VARCHAR(20),
#     RP_TO VARCHAR(20),
#     CONTRACT_NO VARCHAR(50),
#     DISTRICT VARCHAR(50),
#     TRAFFIC VARCHAR(20),
#     REQUESTOR VARCHAR(50),
#     TRAFFIC_CTRL VARCHAR(50),
#     OPERATOR VARCHAR(50),
#     OPERATOR_COMMENT VARCHAR(50),
#     DATE_REQ VARCHAR(50),
#     DATE_NEED VARCHAR(50),
#     COMMENTS VARCHAR(512),
#     PAVTYPE VARCHAR(10),
#     CREATED_USERID  NUMBER(9) NOT NULL,
#     CREATED_DATE    DATE DEFAULT ON NULL SYSDATE NOT NULL,
#     UPDATED_USERID  NUMBER(9) NOT NULL,
#     UPDATED_DATE    DATE DEFAULT ON NULL SYSDATE NOT NULL)
#     """
#     cursor = con.cursor()
#     # cursor.execute("DROP TABLE LONGLIST")
#     cursor.execute(sqlstr)
#     cursor.execute("ALTER TABLE LONGLIST ADD CONSTRAINT UNIQUE_LL_DIR UNIQUE(REQUEST_NO, DIR)")###Add type of lane, change LL_NO to request number
#     cursor.execute("ALTER TABLE LONGLIST ADD CONSTRAINT PK_ID PRIMARY KEY (ID)")
#     con.commit()
#     cursor.close()

#ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
# init_tables(connect())
def compose_ll_info_entry_string(row, year):
    # base_f25_path = os.path.basename(f25_path)
    # dir = (base_f25_path.split())[1]

    ll = {"llno": str(excel.return_value(row, 'Long List Number')),
        "year": year,
        "test status": str(excel.return_value(row, 'Status')),
        "req no": str(excel.return_value(row, 'Request Number')),
        "route": str(excel.return_value(row, 'Route')),
        "rp from": str(excel.return_value(row, 'RP (from)')),
        "rp to": str(excel.return_value(row, 'RP (to)')),
        "des no": str(excel.return_value(row, 'Contract/Des/PK Number')),
        "district": str(excel.return_value(row, 'District')),
        "traffic": str(excel.return_value(row, 'Traffic (Trucks per day)')),
        "contact person": str(excel.return_value(row, 'Requested By')),
        "date req": str(excel.return_value(row, 'Date Requested')),
        "date needed": str(excel.return_value(row, 'Date Needed')),
        "comments": str(excel.return_value(row, 'Comments by requestor')),
        "operator_comment": str(excel.return_value(row, 'Operator comments')),
        "traffic_ctrl":str(excel.return_value(row, 'Traffic Control Scheduled (Put only single day)')),
        }

    # Use double single quote to escape single quote in sqlstr like it is done in .replace("'","''")
    sqlstr = """INSERT INTO stda_LONGLIST_INFO
    VALUES (NULL, """ + str(excel.return_value(row, 'Long List Number')) + """, 
    '""" + year + """', 
    '""" + str(excel.return_value(row, 'Request Number')) + """', 
    '""" + str(excel.return_value(row, 'Status')) + """', 
    '""" + str(excel.return_value(row, 'Route')) + """', 
    '""" + str(excel.return_value(row, 'RP (from)')) + """', 
    '""" + str(excel.return_value(row, 'RP (to)')) + """', 
    '""" + str(excel.return_value(row, 'Contract/Des/PK Number')) + """', 
    '""" + str(excel.return_value(row, 'District')) + """', 
    '""" + str(excel.return_value(row, 'Traffic (Trucks per day)')) + """',
    '""" + str(excel.return_value(row, 'Requested By')) + """',
    '""" + str(excel.return_value(row, 'Traffic Control Scheduled (Put only single day)')) + """',
    '""" + str(excel.return_value(row, 'Operator')) + """',
    '""" + str(excel.return_value(row, 'Operator comments')).replace("'","''") + """',
    '""" + str(excel.return_value(row, 'Date Requested')) + """',
    '""" + str(excel.return_value(row, 'Date Needed')) + """',
    '""" + str(excel.return_value(row, 'Comments by requestor')).replace("'","''") + """',
    -1, NULL, -1, NULL)"""
    # """ + "1" + """,
    # '""" + "NULL" + """',
    # """ + "1" + """,
    # '""" + "NULL" + """')"""

    idstr = """SELECT LONGLIST_INFO_ID FROM stda_LONGLIST_INFO
    WHERE LONGLIST_NO=""" + str(excel.return_value(row, 'Long List Number')) + """ AND  
    YEAR='""" + year + """' AND  
    REQUEST_NO='""" + str(excel.return_value(row, 'Request Number')) + """' AND 
    TEST_STATUS='""" + str(excel.return_value(row, 'Status')) + """' AND  
    ROUTE='""" + str(excel.return_value(row, 'Route')) + """' AND 
    RP_FROM='""" + str(excel.return_value(row, 'RP (from)')) + """' AND 
    RP_TO='""" + str(excel.return_value(row, 'RP (to)')) + """' AND  
    CONTRACT_NO='""" + str(excel.return_value(row, 'Contract/Des/PK Number')) + """' AND
    DISTRICT='""" + str(excel.return_value(row, 'District')) + """' AND
    TRAFFIC='""" + str(excel.return_value(row, 'Traffic (Trucks per day)')) + """' AND 
    NAME='""" + str(excel.return_value(row, 'Requested By')) + """' AND 
    TRAFFIC_CTRL='""" + str(excel.return_value(row, 'Traffic Control Scheduled (Put only single day)')) + """' AND 
    OPERATOR='""" + str(excel.return_value(row, 'Operator')) + """' AND 
    OPERATOR_COMMENT='""" + str(excel.return_value(row, 'Operator comments')).replace("'","''") + """' AND 
    DATE_REQ='""" + str(excel.return_value(row, 'Date Requested')) + """' AND 
    DATE_NEED='""" + str(excel.return_value(row, 'Date Needed')) + """' AND 
    COMMENTS='""" + str(excel.return_value(row, 'Comments by requestor')).replace("'","''") + """'
    """
    # print(sqlstr)
    return sqlstr, idstr, ll



def ll_info_entry(con, excel_path, year, ll):
    # print(excel.return_row(path,ll))
    row = excel.return_row(excel_path, ll, "Test Request Overview")
    cursor = con.cursor()
    # print(compose_ll_info_entry_string(row))
    sqlstr, idstr, llobj = compose_ll_info_entry_string(row, year)
    cursor.execute(sqlstr)
    cursor.execute(idstr)
    
    for result in cursor:
        print('Content of result: {}'.format(result))
        ll_info_id = result[0]
    
    # with open("dbg.txt", "w") as f:
    #     f.write(str(id))
    con.commit()
    
    cursor.close()
    ## llobj is a dictionary
    return ll_info_id, row, llobj
